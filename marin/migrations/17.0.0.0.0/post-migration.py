import logging

from psycopg2.extensions import AsIs

_logger = logging.getLogger(__name__)

MODELS_TO_DELETE = (
    "ir.actions.act_url",
    "ir.actions.act_window",
    "ir.actions.act_window_close",
    "ir.actions.act_window.view",
    "ir.actions.client",
    "ir.actions.report",
    "ir.actions.server",
    "ir.actions.todo",
    "ir.actions.url",
    "ir.actions.wizard",
    "ir.cron",
    "ir.model",
    "ir.model.access",
    "ir.model.fields",
    "ir.model.fields.selection",
    "ir.property",
    "ir.rule",
    "ir.sequence",
    "ir.ui.menu",
    "ir.ui.view",
    "res.groups",
)


def migrate(cr, version):
    remove_uncertified_data(cr)
    remove_all_assets(cr)


def model_to_table(model):
    """Convert model name to database table name

    Get a table name according to a model name In case the table name is set on the model
    itself (using _table), in which case it would be different from the autogenerated one
    that replaces "." by "_".
    """
    model_table_map = {
        "ir.actions.actions": "ir_actions",
        "ir.actions.act_url": "ir_act_url",
        "ir.actions.act_window_close": "ir_actions",
        "ir.actions.act_window": "ir_act_window",
        "ir.actions.act_window.view": "ir_act_window_view",
        "ir.actions.client": "ir_act_client",
        "ir.actions.report": "ir_act_report_xml",
        "ir.actions.server": "ir_act_server",
    }
    tablename = model_table_map.get(model, model.replace(".", "_"))
    return tablename


def remove_uncertified_data(cr):
    """Remove data from models marked to be removed that are not referenced by any installed module"""
    _logger.info("Removing uncertified data")

    # Determine data to remove
    cr.execute(
        """
        WITH installed_module AS (
            SELECT
                name
            FROM
                ir_module_module
            WHERE
                state IN ('installed', 'to install', 'to upgrade')
        ),
        record_to_delete AS (
            SELECT
                model,
                res_id
            FROM
                ir_model_data AS imd
            LEFT OUTER JOIN
                installed_module AS module
                ON imd.module = module.name
            WHERE
                model IN %s
                -- Exclude modules of type __export__
                AND module not like '\\_\\_%%\\_\\_'
                AND module not in ('base_geoengine', 'project_agriculture')
            GROUP BY
                model,
                res_id
            HAVING
                COUNT(module.name) = 0
        )
        SELECT
            model,
            ARRAY_AGG(res_id ORDER BY res_id DESC) AS res_ids
        FROM
            record_to_delete
        GROUP BY
            model;
        """,
        [MODELS_TO_DELETE],
    )
    data_to_delete = cr.fetchall()
    for model, res_ids in data_to_delete:
        res_ids = tuple(res_ids)
        if model == "ir.actions.server":
            cr.execute("DELETE FROM ir_cron WHERE ir_actions_server_id IN %s RETURNING id;", [res_ids])
            remove_external_ids(cr, "ir.cron")

        # Remove records
        table = model_to_table(model)
        cr.execute("DELETE FROM %s WHERE id IN %s;", [AsIs(table), res_ids])
        num_removed_records = cr.rowcount
        remove_external_ids(cr, model, res_ids)
        _logger.info("Removed %d records from model %s", num_removed_records, model)


def remove_external_ids(cr, model, res_ids=None):
    if res_ids is None:
        # Take IDs from records just deleted
        res_ids = tuple(x[0] for x in cr.fetchall())
    if not res_ids:
        return
    cr.execute(
        """
        DELETE FROM
            ir_model_data
        WHERE
            model = %s
            AND res_id IN %s;
        """,
        [model, res_ids],
    )


def remove_all_assets(cr):
    """Remove all assets (``ir.asset``) records

    In previous versions, assets were defined in QWeb templates. During migration, Odoo moves them to
    asset records. Problem is, some of them are outdated ot belong to non-existing modules.
    """
    cr.execute("DELETE FROM ir_asset RETURNING id;")
    remove_external_ids(cr, "ir.asset")
